{
  "_from": "secure-random-string@^1.1.0",
  "_id": "secure-random-string@1.1.0",
  "_inBundle": false,
  "_integrity": "sha512-V/h8jqoz58zklNGybVhP++cWrxEPXlLM/6BeJ4e0a8zlb4BsbYRzFs16snrxByPa5LUxCVTD3M6EYIVIHR1fAg==",
  "_location": "/secure-random-string",
  "_phantomChildren": {},
  "_requested": {
    "type": "range",
    "registry": true,
    "raw": "secure-random-string@^1.1.0",
    "name": "secure-random-string",
    "escapedName": "secure-random-string",
    "rawSpec": "^1.1.0",
    "saveSpec": null,
    "fetchSpec": "^1.1.0"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/secure-random-string/-/secure-random-string-1.1.0.tgz",
  "_shasum": "c47d2f20b6d93db1255edb4dadf5e03188ab978e",
  "_spec": "secure-random-string@^1.1.0",
  "_where": "C:\\xampp\\htdocs\\NCShare\\node-rest",
  "author": {
    "name": "Simon Santoro"
  },
  "bugs": {
    "url": "https://github.com/S2-/securerandomstring/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Mark Stosberg",
      "email": "mark@rideamigos.com"
    }
  ],
  "dependencies": {},
  "deprecated": false,
  "description": "Generates a secure random string with a given length",
  "devDependencies": {},
  "homepage": "https://github.com/S2-/securerandomstring",
  "keywords": [
    "crypto",
    "cryptography",
    "random",
    "secure",
    "string",
    "token"
  ],
  "license": "MIT",
  "main": "lib/secure-random-string.js",
  "name": "secure-random-string",
  "optionalDependencies": {},
  "readme": "# secure-random-string\n\nNode.js module that generates a cryptographically secure random string with a given length\n\n## Usage\n\n```javascript\nvar srs = require('secure-random-string');\n```\n\n### Default behavior: Generate a random string 32 characters long.\n\n```javascript\n// Sync\nvar result = srs();\n\n// Async\nsrs(function(err, sr) {\n\tconsole.log(sr);\n});\n\n```\n\n### Options: length\n\nOptionally, you can specify a 'length' option to specify a length.\n\n```javascript\n// sync\nvar result = srs({length: 256});\n\n// async\nsrs({length: 256}, function(err, sr) {\n\tconsole.log(sr);\n});\n```\n### Options: alphanumeric\n\nOptionally, you can specify a 'alphanumeric' option to get a alphanumerical chars only.\n\n```javascript\n// sync\nvar result = srs({alphanumeric: true});\n\n// async\nsrs({alphanumeric: true}, function(err, sr) {\n\tconsole.log(sr);\n});\n```\n## Error handling\n\n\nAn error is possible if there is not enough accumulated entropy to generate cryptographically strong data. In other words, this will not block even if all entropy sources are drained. Note that the sync API throws an exception, while\nthe async API returns the error to the callback.\n\n## Author\n\n [Simon Santoro](https://github.com/S2-)\n\n## Contributors\n\n [Mark Stosberg](https://github.com/markstos)\n [Sandro Gomez](https://github.com/mrsangrin)\n\n## License\n\n[MIT](https://github.com/aheckmann/node-ses/blob/master/LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/S2-/securerandomstring.git"
  },
  "scripts": {
    "test": "node tests.js"
  },
  "version": "1.1.0"
}
